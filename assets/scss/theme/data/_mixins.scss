/*********************
  Mixins
**********************/

@mixin hover {
  @if $enable-hover-media-query {
    @media (hover: hover) {
      &:hover {
        @content
      }
    }
  }
  @else {
    &:hover {
      @content
    }
  }
}

@mixin hover-focus {
  @if $enable-hover-media-query {
    &:focus {
      @content
      }
    @include hover {
      @content
      }
  }
  @else {
    &:focus,
    &:hover {
      @content
    }
  }
}

@mixin plain-hover-focus {
  @if $enable-hover-media-query {
    &:focus {
      @content
    }
    @include hover {
      @content
    }
  }
  @else {
    &:focus,
    &:hover {
      @content
    }
  }
}

@mixin hover-focus-active {
  @if $enable-hover-media-query {
    &:focus,
    &:active {
      @content
    }
    @include hover {
      @content
    }
  }
  @else {
    &:focus,
    &:active,
    &:hover {
      @content
    }
  }
}

@mixin border-radius($args) {
  -webkit-border-radius: $args;
  -moz-border-radius: $args;
  -ms-border-radius: $args;
  -o-border-radius: $args;
  border-radius: $args;
}

@mixin placeholder {
  &::-webkit-input-placeholder {
    @content
  }
  &:-moz-placeholder {
    @content
  }
  &::-moz-placeholder {
    @content
  }
  &::-ms-placeholder {
    @content
  }
  &::placeholder {
    @content
  }
}

// New mixins
@mixin make-button($name, $color) {
  .btn-#{$name} {
    background-color: $color;
    &:hover {
      background-color: lighten($color, 5%) !important;
    }
    &:focus,
    &:active,
    &.active {
      background-color: darken($color, 15%) !important;
    }
    &.dropdown-toggle {
      background-color: $color!important;
      &:hover,
      &:focus {
        background-color: lighten($color, 5%) !important;
      }
    }
  }
}

@mixin make-outline-button($name, $color) {
  .btn-outline-#{$name} {
    border: 2px solid $color;
    color: $color !important;
    background-color: transparent;
    &:hover,
    &:focus,
    &:active,
    &:active:focus,
    &.active {
      background-color: transparent;
      color: $color;
      border-color: $color;
    }
  }
}

@mixin make-gradient-button($name, $value) {
  .btn.#{$name}-gradient {
    background: linear-gradient(40deg, map-get($value, start), map-get($value, end)) !important;
    transition:.3s ease;
    &:hover,
    &:focus,
    &:active,
    &:active:focus
    &.active {
      background: linear-gradient(40deg, lighten(map-get($value, start), 5%), lighten(map-get($value, end), 5%));
    }
  }
}

// Button sizes
@mixin button-size($padding-y, $padding-x, $font-size, $line-height, $border-radius) {
  padding: $padding-y $padding-x;
  font-size: $font-size;
  line-height: $line-height;
  @include border-radius($border-radius);
}

@mixin transition($transition) {
  -moz-transition:    $transition;
  -o-transition:      $transition;
  -webkit-transition: $transition;
  transition:         $transition;
}

@mixin transition-property($property) {
  -moz-transition-property:    $property;
  -o-transition-property:      $property;
  -webkit-transition-property: $property;
  transition-property:         $property;
}

@mixin transition-duration($duration) {
  -moz-transition-property:    $duration;
  -o-transition-property:      $duration;
  -webkit-transition-property: $duration;
  transition-property:         $duration;
}

@mixin transition-timing-function($timing) {
  -moz-transition-timing-function:    $timing;
  -o-transition-timing-function:      $timing;
  -webkit-transition-timing-function: $timing;
  transition-timing-function:         $timing;
}

@mixin transition-delay($delay) {
  -moz-transition-delay:    $delay;
  -o-transition-delay:      $delay;
  -webkit-transition-delay: $delay;
  transition-delay:         $delay;
}

@mixin transform($args) {
  -webkit-transform: $args;
  -moz-transform: $args;
  -ms-transform: $args;
  -o-transform: $args;
  transform: $args;
}

@mixin width-calc($width) {
  width: -webkit-calc(100% - #{$width});
  width: -moz-calc(100% - #{$width});
  width: calc(100% - #{$width});
}

@mixin height-calc($height) {
  height: -webkit-calc(100vh - #{$height});
  height: -moz-calc(100vh - #{$height});
  height: calc(100vh - #{$height});
}

@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}
@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex:  $values;
  -webkit-flex:  $values;
  -ms-flex:  $values;
  flex:  $values;
}
@mixin order($val) {
  -webkit-box-ordinal-group: $val;
  -moz-box-ordinal-group: $val;
  -ms-flex-order: $val;
  -webkit-order: $val;
  order: $val;
}
@mixin align($align) {
  -webkit-flex-align: $align;
  -ms-flex-align: $align;
  -webkit-align-items: $align;
  align-items: $align;
}
@mixin justify-content($val) {
  -webkit-justify-content: $val;
  justify-content: $val;
}

@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}